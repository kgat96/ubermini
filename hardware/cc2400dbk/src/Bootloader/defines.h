/*******************************************************************************************************
*                                                                                                     *
*        **********                                                                                   *
*       ************                                                                                  *
*      ***        ***                                                                                 *
*      ***   +++   ***                                                                                *
*      ***   + +   ***                                                                                *
*      ***   +                                   CHIPCON CC2400DBK BOOTLOADER                         *
*      ***   + +   ***                           Bootloader define file                               *
*      ***   +++   ***                                                                                *
*      ***        ***                                                                                 *
*       ************                                                                                  *
*        **********                                                                                   *
*                                                                                                     *
*******************************************************************************************************
* This program allows an AVR with bootloader capabilities to read and write to its own Flash/EEPROM.  * 
* It contains the AVR C and EC++ startup routine and must be tailored to suit customers's hardware.   *
*                                                                                                     *
*                                                                                                     *
* Please that this code is based on Atmel Corporation source code from their application note AVR109, *
* Self Programming                                                                                    *
*                                                                                                     *
*******************************************************************************************************
* Compiler: AVR-GCC                                                                                   *
* Target platform: CC2400DB (can easily be ported to other platforms)                                 *
*******************************************************************************************************
* Revision history:                                                                                   *
* $Log: defines.h,v $
* Revision 1.3  2004/07/20 12:22:20  mbr
* Bootloader according application note AVR109,
* Self Programming with only C - code
*
* Revision 1.2  2004/03/30 13:31:02  mbr
* Release for web
*                                                                                 *
* Revision 1.1.1.1  2004/02/10 10:59:01  jol
* Created archive
*                                                                                                     *
*******************************************************************************************************/

//-------------------------------------------------------------------------------------------------------
// Create a file (defines.h) containing the following:		
// Definitions generated by preprocessor, copy into defines.h 		
#ifndef	PPINC	

#define   _ATMEGA8	// device select: _ATMEGAxxxx
#define	  _B512	    // boot size select: _Bxxx (words)
#include  "iom8.h"

// #define LARGE_MEMORY

//-------------------------------------------------------------------------------------------------------
// Common data types
typedef unsigned char		BOOL;

typedef unsigned char		BYTE;
typedef unsigned short		WORD;
typedef unsigned long		DWORD;
//typedef unsigned long long	QWORD;

typedef unsigned char		UINT8;
typedef unsigned short		UINT16;
typedef unsigned long		UINT32;
//typedef unsigned long long	UINT64;

typedef signed char		INT8;
typedef signed short		INT16;
typedef signed long		INT32;
//typedef signed long long	INT64;



/*******************************************************************************************************
 *******************************************************************************************************
 **************************                Memory Macros                      **************************
 *******************************************************************************************************
 *******************************************************************************************************/

//-------------------------------------------------------------------------------------------------------
// Macros for Memory control 	
#define _GET_LOCK_BITS() __AddrToZByteToSPMCR_LPM( (void __flash *) 0x0001, 0x09 )
#define _GET_LOW_FUSES() __AddrToZByteToSPMCR_LPM( (void __flash *) 0x0000, 0x09 )
#define _GET_HIGH_FUSES() __AddrToZByteToSPMCR_LPM( (void __flash *) 0x0003, 0x09 )
#define _GET_EXTENDED_FUSES() __AddrToZByteToSPMCR_LPM( (void __flash *) 0x0002, 0x09 )
#define _SET_LOCK_BITS(data) __DataToR0ByteToSPMCR_SPM( data, 0x09 )
#define _ENABLE_RWW_SECTION() __DataToR0ByteToSPMCR_SPM( 0x00, 0x11 )

#define _WAIT_FOR_SPM() while( SPMCR_REG & (1<<SPMEN) );

#ifndef LARGE_MEMORY
      #define _LOAD_PROGRAM_MEMORY(addr) __load_program_memory( (const unsigned char __flash *) (addr) )
      #define _FILL_TEMP_WORD(addr,data) __AddrToZWordToR1R0ByteToSPMCR_SPM( (void __flash *) (addr), data, 0x01 )
      #define _PAGE_ERASE(addr) __AddrToZByteToSPMCR_SPM( (void __flash *) (addr), 0x03 )
      #define _PAGE_WRITE(addr) __AddrToZByteToSPMCR_SPM( (void __flash *) (addr), 0x05 )
#else
      #define _LOAD_PROGRAM_MEMORY(addr) __extended_load_program_memory( (const unsigned char __farflash *) (addr) )
      #define _FILL_TEMP_WORD(addr,data) __AddrToZ24WordToR1R0ByteToSPMCR_SPM( (void __farflash *) (addr), data, 0x01 )
      #define _PAGE_ERASE(addr) __AddrToZ24ByteToSPMCR_SPM( (void __farflash *) (addr), 0x03 )
      #define _PAGE_WRITE(addr) __AddrToZ24ByteToSPMCR_SPM( (void __farflash *) (addr), 0x05 )
#endif


/*******************************************************************************************************
 *******************************************************************************************************
 **************************                 UART and SPM defines              **************************
 *******************************************************************************************************
 *******************************************************************************************************/


//-------------------------------------------------------------------------------------------------------
// Definitions for UART control 		
#define	BAUD_RATE_LOW_REG	    UBRRL
#define	UART_CONTROL_REG	    UCSRB
#define	ENABLE_TRANSMITTER_BIT	    TXEN
#define	ENABLE_RECEIVER_BIT	    RXEN
#define	UART_STATUS_REG	            UCSRA
#define	TRANSMIT_COMPLETE_BIT	    TXC
#define	RECEIVE_COMPLETE_BIT	    RXC
#define	UART_DATA_REG	            UDR

//-------------------------------------------------------------------------------------------------------
// Definitions for SPM control 		
#define	LOAD_SPM_CONTROL_REGISTER_MACRO	  OUT SPMCR, R18
#define	GET_SPM_CONTROL_REGISTER_MACRO	  IN R18, SPMCR
#define	REENABLE_RWW_BIT	          RWWSRE




/*******************************************************************************************************
 *******************************************************************************************************
 **************************                 General constants                 **************************
 *******************************************************************************************************
 *******************************************************************************************************/


//#define	LARGE_MEMORY
#define	SPMCR_REG	    SPMCR	
#define	PAGESIZE            64
#define	APP_END             7168


//-------------------------------------------------------------------------------------------------------
// Definitions for AVRProg communication 	
#define	PARTCODE	        0x77
#define	SIGNATURE_BYTE_1	0x1E
#define	SIGNATURE_BYTE_2	0x93
#define	SIGNATURE_BYTE_3	0x07




/*******************************************************************************************************
 *******************************************************************************************************
 **************************                  Port pins defines                **************************
 *******************************************************************************************************
 *******************************************************************************************************/


//-------------------------------------------------------------------------------------------------------
// Define the pin used to enter self-progamming mode 		
#define	PROGPORT	  PORTD
#define	PROGPIN		  PIND 
#define	PROGCTRL()	  (1<<PD7)

#define	PROGMODE()	  !(PROGPIN & PROGCTRL())
#define UART_FORCE_ON()	  (DDRC |= (1<<PC4))       // Set UART FORCE ON as output
#define UARTPORT          PORTC   
#define UARTCTRL()        (1<<PC4)



/*******************************************************************************************************
 *******************************************************************************************************
 **************************                  EEPROM Macros                    **************************
 *******************************************************************************************************
 *******************************************************************************************************/


// EEPROM macros
#define EEPROM_WAIT() do { while(EECR & (1<<EEWE)); } while (0) 
#define EEPROM_RD_ENABLE() (EECR |= (1<<EERE));
#define EEPROM_RD_DISABLE() (EECR &= ~(1<<EERE));

#define EEPROM_WR_ENABLE() do { (EECR = ((1<<EEMWE)|(1<<EEWE))); } while (0)

// Macro to read AVR EEPROM		
#define EEPROM_READ(a,v) do {EEPROM_WAIT(); EEAR=(a); EEPROM_RD_ENABLE(); (v)=EEDR; } while (0) 
// Macro to write to AVR EEPROM
#define EEPROM_WRITE(a,v) do { EEPROM_WAIT(); EEAR=(a); EEDR =(v); EEPROM_WR_ENABLE();} while (0) 

//-------------------------------------------------------------------------------------------------------	               
// Indicate preprocessor result included 		
#define	PPINC	
#endif		
